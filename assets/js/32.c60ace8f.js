(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{215:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("В кругу моих знакомых имеются товарищи весьма и весьма далёкие от\nмира железок, интернета и open source (в общем, они пропустили всё самое интересное).\nНе далее как на прошлой неделе угораздило таки употребить при них непотребное\nсловосочетание «pull request», после чего, ловя недоумённые взгляды,\nпришлось мяться и придумывать как сие получше перевести на великий и могучий.\nУвы, к взаимопониманию это не привело: попробую ответить здесь.")]),t._v(" "),n("p",[n("strong",[t._v("Pull Request")]),t._v(" — запрос на включение. На включение написанного\nвами кода в чужой репозиторий.")]),t._v(" "),n("h2",{attrs:{id:"с-чего-начать"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#с-чего-начать","aria-hidden":"true"}},[t._v("#")]),t._v(" С чего начать?")]),t._v(" "),n("p",[t._v("А для начала этот самый репозиторий нужно форкнуть (fork — вилка, ответвление).\nРазберём это нехитрое действо на примере веб-сервиса для хостинга IT-проектов,\nназвание которому GitHub. Разумеется, кроме GitHub есть и другие: BitBucket,\nнапример. Выбирать по вкусу.")]),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("На заметку")]),t._v(" "),n("p",[t._v("Для успешного проведения нижеизложенных операций у вас\n(что естественно) должен быть установлен git")])]),t._v(" "),n("p",[t._v("Заходим на страницу интересующего проекта, жмём кнопку "),n("code",[t._v("Fork")]),t._v(", ищем\n"),n("em",[t._v("на своей")]),t._v(" странице URL для клонирования.")]),t._v(" "),n("p",[n("img",{attrs:{src:a(88),alt:"fork",title:"форк репозитория на гитхаб"}})]),t._v(" "),n("p",[t._v("В консоли в зависимости от входных данных набираем нечто подобное:")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone git@github.com/username/django_documentation.git\n")])])]),n("p",[t._v("Отлично. Уже можно вносить свои изменения в код проекта.")]),t._v(" "),n("p",[t._v("Тот репозиторий, что теперь лежит на вашем жёстком диске, независим от\nосновного. В нём отслеживаются только ваши наработки. Но как следить за\nизменениями, происходящими в первоисточнике, откуда вы «стянули»\nрепозиторий? Добавить удаленный репозиторий в отслеживаемые. Например, так:")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\norigin  git@github.com:username/django_documentation.git "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\norigin  git@github.com:username/django_documentation.git "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" upstream git@github.com:Alerion/django_documentation.git\n")])])]),n("p",[t._v("После добавления "),n("code",[t._v("upstream")]),t._v(" в отслеживаемые, наберите команду "),n("code",[t._v("git remote -v")]),t._v("\nещё раз, вы должны увидеть произошедшие изменения.")]),t._v(" "),n("p",[t._v("Давайте посмотрим как сливать изменения из оригинального репозитория к себе\nв случае, если разработка в нём ушла вперёд пока вы сосредоточенно писали коммиты:")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull upstream master\nFrom github.com:Alerion/django_documentation\n* branch            master     -"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" FETCH_HEAD\nUpdating 66f032e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("062b294\nFast-forward\ndjbook/commands/authors.py                    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),t._v(" ++--\ndjbook/deps.txt                               "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" ++--\ndjbook/templates/authors.html                 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v(" ++--\ndjbook/templates/base.html                    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" ++--\nlocale/ru/LC_MESSAGES/faq/install.po          "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("94")]),t._v(" +++-\nlocale/ru/LC_MESSAGES/faq/usage.po            "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("49")]),t._v(" +---\nlocale/ru/LC_MESSAGES/howto/outputting-csv.po "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("61")]),t._v(" ++--\nlocale/ru/LC_MESSAGES/topics/cache.po         "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("77")]),t._v(" ++--\nlocale/ru/LC_MESSAGES/topics/db/multi-db.po   "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(" +++-\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" files changed, "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("290")]),t._v(" insertions"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("163")]),t._v(" deletions"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("У нас есть основной репозиторий с веткой "),n("code",[t._v("master")]),t._v(" и недавно добавленный нами\n— с "),n("code",[t._v("upstream")]),t._v(". Команда, данная выше, забирает всё новое из ветки "),n("code",[t._v("upstream")]),t._v("\nи сливает изменения в "),n("code",[t._v("master")]),t._v(". Так, мы всегда можем получить последние наработки.")]),t._v(" "),n("p",[t._v("Вы можете также воспользоваться другой командой — "),n("code",[t._v("fetch")]),t._v("\nвместо указанной "),n("code",[t._v("pull")]),t._v(". В таком случае git заберет изменения с\nудаленного репозитория, но не будет пытаться слить их с вашей текущей веткой\nавтоматически.")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch upstream\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge upstream/master\n")])])]),n("p",[t._v("Допустим, мы написали, что хотели и сделали коммит. Забираем изменения (но не сливаем их, fetch) из "),n("code",[t._v("upstream")]),t._v(".\nЗатем вручную сливаем изменения из удалённой ветки "),n("code",[t._v("upstream/master")]),t._v(" к себе (merge),\nразрешаем конфликты (если есть) и снова делаем коммит.")]),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("На заметку")]),t._v(" "),n("p",[t._v("Если репозиторий огромен, а забирать его весь не хочется, клонируем только нужную ветку")])]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# клонировать только ветку real_branch:")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone -b real_branch --single-branch git@github.com/username/django_documentation.git\n")])])]),n("h2",{attrs:{id:"что-такое-ветки"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#что-такое-ветки","aria-hidden":"true"}},[t._v("#")]),t._v(" Что такое ветки?")]),t._v(" "),n("p",[t._v("Чаще всего ветки (branch — ответвление, ветвь, филиал) бывают\nтематическими. Например, при общей разработке, когда у всех участников\nесть право записи в репозиторий. В этом случае ветки используются для\nотделения изменений, сделанных одним из разработчиков, от общего репозитория.\nВетки могут пригодиться и в случае с созданием pull-request'а.")]),t._v(" "),n("p",[t._v("Создание ветки происходит довольно просто. Находясь в каталоге с проектом,\nнаберите следующие команды:")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# отобразить все ветки")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -a\n* master\nremotes/origin/1.4\nremotes/origin/HEAD -"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" origin/master\nremotes/origin/master\nremotes/upstream/1.4\nremotes/upstream/master\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# создать новую ветку из master, переключиться на неё")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b new_branch\n")])])]),n("p",[t._v("Новые ветки создаются не только из master, берите любую!")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# создать новую ветку из удалённой origin/1.4")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b new_branch origin/1.4\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# если ветки нет в отслеживаемых, а отслеживать надо, поможет флаг t (track)")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -t origin/1.4\n")])])]),n("p",[t._v("Находясь в только что созданной ветке, вы можете приступить к работе.\nВносите в код свои изменения, а когда закончите просто переключитесь\nобратно к своей основной ветке. Вы можете отправить pull request,\nвыбрав ветку "),n("code",[t._v("new_branch")]),t._v(" или же прежде слить изменения из неё в\nосновную ветку разработки. Рассмотрим это подробнее:")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# вернуться к основной ветке")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge new_branch "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# слить изменения из new_branch")]),t._v("\n")])])]),n("p",[t._v("Если нужно отправить в свой удалённый репозиторий вновь созданную\nветку (не сливать её с master), делаем следующее:")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push master new_branch\n")])])]),n("p",[t._v("Не торопитесь сливать изменения. Если что-то не заладилось, созданную\nветку можно удалить:")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d new_branch            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# удалить локально")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push master :new_branch         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# в удалённом репозитории")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ещё один способ удалить ветку в удалённом репозитории")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin --delete new_branch\n")])])]),n("h2",{attrs:{id:"отправnяем-изменения"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#отправnяем-изменения","aria-hidden":"true"}},[t._v("#")]),t._v(" Отправляем изменения")]),t._v(" "),n("p",[t._v("Добрались таки до ответа на поставленный вопрос: что такое pull request,\nзачем оно нужно и как его достичь. Как предложить владельцу репозитория свои изменения?")]),t._v(" "),n("p",[t._v("Для этого зайдите в свой аккаунт, выбирайте репозиторий владельца и ищите\nнебольшую зелёную кнопку (на момент написания поста она была таковой,\nесли даже что-то изменится, думаю, найти её будет несложно).")]),t._v(" "),n("p",[t._v("Перед тем как сделать запрос вы имеете возможность добавить комментарий,\nпросмотреть то, какие файлы будут изменены, какие коммиты добавлены.\nВ верхнем углу окна добавления запроса обратите внимание откуда куда и что\nвы сливаете. Если необходимо слить основные ветки выбор падёт на репозиторий\n"),n("code",[t._v("username:master")]),t._v(", если отдельную ветку (вспоминаем branch) — так и указывайте её.")]),t._v(" "),n("p",[n("img",{attrs:{src:a(89),alt:"request",title:"отправка MR"}})]),t._v(" "),n("p",[t._v("А дальше... ждать. Пока придёт владелец оригинального репозитория и\nпримет/отклонит ваши изменения.")]),t._v(" "),n("p",[t._v("Ну вот, мы его достигли. Просветления то есть 😃")]),t._v(" "),n("h2",{attrs:{id:"как-отменить-изменения"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#как-отменить-изменения","aria-hidden":"true"}},[t._v("#")]),t._v(" Как отменить изменения")]),t._v(" "),n("p",[t._v("Если что-то пошло совсем не так как хотелось, изменения можно «откатить».\nКогда изменённый файл ещё не проиндексирован, сделать это просто:")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -- myfile\n")])])]),n("p",[t._v("Когда нужно вернуть более старое состояние уже проиндексированных файлов и забыть\nо них совсем (помните, что упомянутая здесь операция отменит всю вашу работу\nдо определённого коммита!):")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD~1\n")])])]),n("p",[t._v("Cмотрим на какой коммит откатиться. В примере откатываемся назад на 1 коммит.\nДля изменения состояния в этой же ветке удалённого репозитория тоже придётся\nиспользовать грубую силу — флаг "),n("code",[t._v("force")]),t._v(":")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin new_branch:new_branch --force\n")])])]),n("p",[t._v("Охватить все варианты невозможно, поэтому рекомендуется обратиться к\nдокументации и найти команду "),n("code",[t._v("git revert")]),t._v(" и ключ "),n("code",[t._v("--soft")]),t._v(". Отдельно хочется отметить:\nв git ничего не пропадает бесследно. Если файлы были удалены, их можно восстановить опять.")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout 4b9df4bbd -- files\n")])])]),n("p",[t._v("Дословно можно понимать эту команду как «из коммита 4b9df4bbd вернуть files».\nЗатем останется только зафиксировать изменения (сделать коммит).")]),t._v(" "),n("p",[t._v("Кстати, git log очень полезная команда, её изучению определённо стоит уделить время.\nНапример, полезно знать, что при помощи флага "),n("code",[t._v("-S")]),t._v(" мы можем получить список всех\nкоммитов, в которых менялась строка, а соответственно и имя автора коммита.")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log -S "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mystring"')]),t._v("\n")])])]),n("h2",{attrs:{id:"а-подробнее"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#а-подробнее","aria-hidden":"true"}},[t._v("#")]),t._v(" А подробнее?")]),t._v(" "),n("p",[t._v("Ну, что ещё? Применительно к github'у можно отметить факт наличия\nу них "),n("strong",[t._v("Issues")]),t._v(". Это такая «примочка», благодаря которой\nможно ставить задачи для проекта, давать им описание и метку, определяющую\nк какому разряду данная задача относится (закрытие бага или написание фичи),\nа ещё назначать ответственного за выполнение определённого "),n("strong",[t._v("issue")]),t._v(": всё как у больших.")]),t._v(" "),n("p",[t._v("Итогов подводить не стану. Для заинтересованных лиц ссылочка на неофициальную документацию: "),n("a",{attrs:{href:"http://uleming.github.io/gitbook/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Git Community Book"),n("OutboundLink")],1)])])},[],!1,null,null,null);s.default=e.exports},88:function(t,s,a){t.exports=a.p+"assets/img/fork.png"},89:function(t,s,a){t.exports=a.p+"assets/img/change-and-comment.jpg"}}]);